# .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-linux-android
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tool
        # 'cross' is not needed for native macOS builds or the primary Linux GNU target.
        # It's used for cross-compiling to other Linux-based targets from the Ubuntu runner.
        if: runner.os == 'Linux' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          # Use 'cargo' for native builds (macOS and the primary Linux target on its runner)
          # and 'cross' for all other cross-compilation targets on Linux runners.
          if [[ "${{ runner.os }}" == "macOS" || "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            cargo build --release --target ${{ matrix.target }}
            BINARY_PATH="target/${{ matrix.target }}/release/isoterm"
          else
            cross build --release --target ${{ matrix.target }}
            BINARY_PATH="target/${{ matrix.target }}/release/isoterm"
          fi

          # Create archive
          ARCHIVE_NAME="isoterm-${{ matrix.target }}.tar.gz"
          tar -czf "$ARCHIVE_NAME" -C "$(dirname "$BINARY_PATH")" "$(basename "$BINARY_PATH")"
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.target }}
          path: ${{ env.ARCHIVE_NAME }}

  publish-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: release-assets-*
          merge-multiple: true

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Prepare setup script
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          # Use a different separator for sed to avoid conflicts with slashes in the version
          sed -i "s|<PLACEHOLDER_VERSION>|${VERSION}|g" setup.sh
          mv setup.sh release-assets/

      - name: Determine pre-release status
        id: is_prerelease
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ "$VERSION" == *-* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"
          SETUP_URL="${GITHUB_REPO_URL}/releases/download/${VERSION}/setup.sh"

          NOTES=$(cat <<EOF
          ## Installation

          To install this version, run the following command:

          \`\`\`sh
          curl -sSL "${SETUP_URL}" | sh
          \`\`\`

          ### Install to a custom directory:

          \`\`\`sh
          curl -sSL "${SETUP_URL}" | sh -s -- ./my-custom-env
          \`\`\`
          EOF
          )
          # Use a heredoc to safely pass the multiline string to the output
          {
            echo "NOTES<<EOF"
            echo "$NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.NOTES }}
          prerelease: ${{ steps.is_prerelease.outputs.prerelease }}
          files: release-assets/*