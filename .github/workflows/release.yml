name: Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build_and_upload:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: aarch64-linux-android
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-linux-android'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ] || [ "${{ matrix.target }}" == "aarch64-linux-android" ]; then
            cross build --verbose --release --target ${{ matrix.target }}
          else
            cargo build --verbose --release --target ${{ matrix.target }}
          fi

      - name: Package binary
        shell: bash
        run: |
          BINARY_NAME="isoterm"
          ARCHIVE_NAME="isoterm-${{ github.ref_name }}-${{ matrix.target }}.tar.gz"

          # The binary is in target/<target>/release/
          BINARY_PATH="target/${{ matrix.target }}/release/$BINARY_NAME"

          # Create a staging directory to control archive contents
          mkdir staging
          cp "$BINARY_PATH" staging/

          # Create the archive
          tar -czf "$ARCHIVE_NAME" -C staging .

          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/gzip

  upload_installer_script:
    name: Upload Installer Script
    runs-on: ubuntu-latest
    needs: build_and_upload
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare setup.sh for Release
        run: |
          RELEASE_TAG=${{ github.ref_name }}
          cp setup.sh setup-release.sh
          sed -i "s|<PLACEHOLDER_VERSION>|${RELEASE_TAG}|g" setup-release.sh

      - name: Upload versioned setup.sh to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./setup-release.sh
          asset_name: setup.sh
          asset_content_type: text/plain
